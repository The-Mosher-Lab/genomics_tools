#!/usr/bin/env python3

# Author: Jeffrey Grover
# Purpose: Convert a .bed file with 6 columns into a gtf format for TE annotation
# Created: 09/2017

# This script accepts a nonstandard .bed file generated by the Freeling Lab's
# repeatmasker workflow in the format:
# chr   start   stop    TE-family   TE-type strand
# and outputs a gtf file for use with differential expression workflows

from argparse import ArgumentParser


def bed_to_gtf(input_file, anno_source):
    with open(input_file, 'r') as input_handle:
        for line in input_handle:
            entry = line.split()
            chrom = 'Chr_' + entry[0]
            start = int(entry[1]) + 1  # To convert to 1-based coordinates
            stop = int(entry[2]) + 1
            name_family = entry[3]
            te_type = entry[
                4]  # Original .bed file had TE type in this position
            strand = entry[5]
            print(
                chrom, anno_source, 'transposable_element', start, stop, '.',
                strand, '.',
                'gene_id "%s"; gene_name "%s"; transposable_element_family_ID "%s"; transposable_element_type "%s";'
                % (name_family, name_family, name_family, te_type), sep='\t')


# Parse command line options

parser = ArgumentParser(
    description=
    'Converts a .bed file with 6 columns to gtf. It requires that you know the '
    'feature type and source fields and input them using the appropriate '
    'command line option. This was created to convert a bed file for TE '
    'annotations, so use for other purposes will require modification.')
parser.add_argument('input_path', help='File to process', metavar='File')
parser.add_argument('--source', help='Source of the annotation', type=str)
parser.add_argument('--feature',
                    help='The type of feature contained within the .bed file',
                    type=str)

input_path = parser.parse_args().input_path
source = parser.parse_args().source

# Process the file

bed_to_gtf(input_path, source)
