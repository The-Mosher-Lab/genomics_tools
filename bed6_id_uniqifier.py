#!/usr/bin/env python3

# Author: Jeffrey Grover
# Purpose: Take a .bed file with 6 columns and append a number to each ID in
# column 4 if they are not unique
# Created: 11/2017

# This script accepts a nonstandard .bed file generated by the Freeling Lab's
# repeatmasker workflow in the format:
# chr   start   stop    TE-family   TE-type strand
# and outputs another 6 column .bed with unique IDs to stdout

from argparse import ArgumentParser


def parse_bed6(input_bed6):
    with open(input_bed6, 'r') as input_handle:
        te_counts = {}
        for line in input_handle:
            entry = line.split()
            chromosome = entry[0]
            start = entry[1]
            stop = entry[2]
            te_id = entry[3]
            te_family = entry[4]
            strand = entry[5]
            if te_id not in te_counts:
                te_counts[te_id] = 1
            else:
                te_counts[te_id] += 1
            te_id_count = te_counts[te_id]
            te_id_unique = te_id + '_%s' % te_id_count
            print(chromosome, start, stop, te_id_unique, te_family, strand,
                  sep='\t')


# Parse command line options

parser = ArgumentParser(
    description='Take a .bed file with 6 columns and append a number to each '
    'ID in column 4 if they are not unique')
parser.add_argument('input_path', help='File to process', metavar='File')

input_path = parser.parse_args().input_path

# Process the file

parse_bed6(input_path)
